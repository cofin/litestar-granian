
####################
# Project Metadata #
####################
[project]
authors = [{ name = "Cody Fincher", email = "cody@litestar.dev" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
]
dependencies = [
  "litestar>=2.7.0",
  "granian[all]>=1.6.0",
  "fast-query-parsers",
  "httptools",
  "uvloop; sys_platform != 'win32'",
]
description = "Granian plugin for Litestar"
keywords = ["litestar", "granian", "asgi"]
license = { text = "MIT" }
name = "litestar-granian"
readme = "README.md"
requires-python = ">=3.8"
version = "0.7.0"

[project.urls]
Changelog = "https://cofin.github.io/litesatr-granian/latest/changelog"
Discord = "https://discord.gg/X3FJqy8d2j"
Documentation = "https://cofin.github.io/litesatr-granian/latest/"
Homepage = "https://cofin.github.io/litesatr-granian/latest/"
Issue = "https://github.com/cofin/litestar-granian/issues/"
Source = "https://github.com/cofin/litestar-granian"

######################
# Build & Versioning #
######################
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.sdist]
dev-mode-dirs = ["."]
exclude = ["/.github", "/docs"]

[tool.hatch.metadata]
allow-direct-references = true

#####################
# Environment Setup #
#####################
# Test environment with test-only dependencies
[tool.uv]
dev-dependencies = [
  # - Documentation
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  # - Linting
  "mypy",
  "ruff",
  "slotscheck",
  "pylint",
  "pyright",
  "pre-commit",
  "types-setuptools",
  "types-click",
  "types-decorator",
  "types-pyyaml",
  "types-docutils",
  "types-Pygments",
  "types-Pillow",
  "types-colorama",
  "types-pytz",
  # - Testing
  "structlog",
  "anyio",
  "coverage[toml]",
  "pytest",
  "pytest-timeout",
  "pytest-cov",
  "pytest-mock",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
]

#####################
#    Testing        #
#####################
[tool.pytest.ini_options]
addopts = "-ra -q --doctest-glob='*.md'"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources.*",
  "ignore::DeprecationWarning:xdist.*",
  "ignore::DeprecationWarning:importlib._bootstrap",
  "ignore::DeprecationWarning:litestar.handlers.http_handlers.decorators",
]
testpaths = ["tests"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]


[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
disable_warnings = ["no-data-collected", "module-not-measured", "module-not-imported"]
omit = ["litestar_granian/__metadata__.py", "tests/*", "scripts/*"]
parallel = true


#####################
# Tools             #
#####################

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
]
fix = true
include = ["litestar_granian/**/*.py", "litestar_granian/**/*.pyi", "tests/**/*.py", "tests/**/*.pyi","docs/**/*","examples/**/*"]
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
  "B027",   # Allow non-abstract empty methods in abstract base classes
  "FBT003", # Allow boolean positional values in function calls, like `dict.get(... True)`
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "PLC1901", # empty string comparisons
  "PLW2901", # `for` loop variable overwritten
  "SIM114",  # Combine `if` branches using logical `or` operator
  "E203",    # Whitespace before :, needed for black compatibility and also `ruff format`
  "ISC001",  # causes unexpected behaviour with formatter
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "ANN102",
  "ANN101",  # ruff - Missing type annotation for `self` in method
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  # Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "RUF029",  # Ruff - Function is declared `async`, but doesn't `await` or use `async` features. # ignore
  "SLF001",
  "PT007",
  'PT004',
  'PT005',
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "ANN102",
  "ANN101",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
  "COM812",
  "PLR0917",
  "CPY001",  # copywrite check
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
preview = true                                                    # preview features & checks, use with caution
src = ["litestar_granian","tools","example", "tests/", "docs/"]
target-version = "py39"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["litestar_granian", "tests"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"__init__.py" = ['F401', 'D104']
"__main__.py" = ["E402"]
"docs/*" = ["S404", "INP001","PLW0127","A001","ERA001","F811"]
"tools/*" = ["S404"]
"examples/*" = ["T201","DOC201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = [
  "PLR2004",
  "S101",
  "TID252",
  "ERA001",
  "ANN201",
  "ANN001",
  "D103",
  "D104",
  "T201",
  "S404",
  "PLR6301",
  "FA102",
]


[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.slotscheck]
strict-imports = false

[tool.mypy]
disallow_any_generics = false
disallow_untyped_decorators = true
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
packages = "litestar_granian,tests,examples,docs"

[[tool.mypy.overrides]]
disable_error_code = "attr-defined"
disallow_untyped_decorators = false
module = "tests.*"

[tool.codespell]
ignore-words-list = ["granian"]
skip = 'uv.lock'

[tool.git-cliff.changelog]
body = """
{% if version %}\
    `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/cofin/litestar-granian/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/cofin/litestar-granian/commits/v{{ version | trim_start_matches(pat="v") }}>`_
{% else %}\
    [unreleased]
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/cofin/litestar-granian/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | truncate(length=7, end="") }} <https://github.com/cofin/litestar-granian/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/cofin/litestar-granian/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {{ group | upper_first }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {% for commit in commits %}
        * (`{{ commit.id | truncate(length=7, end="") }} <https://github.com/cofin/litestar-granian/commit/{{ commit.id }}>`_) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first }} ({{ commit.author.name  }})\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
Litestar Granian Changelog
"""
header = """
=========
Changelog
=========\n
All commits to this project will be documented in this file.\n
"""
trim = true

[tool.git-cliff.git]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
conventional_commits = true
filter_commits = false
filter_unconventional = true
ignore_tags = ""
protect_breaking_commits = false
skip_tags = "v0.1.0-beta.1"
sort_commits = "oldest"
split_commits = false
tag_pattern = "v[0-9]*"
topo_order = false
